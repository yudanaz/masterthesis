/*=============================================================================
This file was generated by the AVT VimbaClassGenerator
=============================================================================*/

#include "GoldeyeCamera.h"

GoldeyeCamera::GoldeyeCamera (
	const char         *pCameraID,
	const char         *pCameraName,
	const char         *pCameraModel,
	const char         *pCameraSerialNumber,
	const char         *pInterfaceID,
	VmbInterfaceType    interfaceType,
	const char         *pInterfaceName,
	const char         *pInterfaceSerialNumber,
	VmbAccessModeType   interfacePermittedAccess
	)
	: Camera (
		pCameraID,
		pCameraName,
		pCameraModel,
		pCameraSerialNumber,
		pInterfaceID,
		interfaceType)
{
}


// Category /AcquisitionControl
VmbErrorType GoldeyeCamera::GetTriggerSelector (TriggerSelectorEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTriggerSelectorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (TriggerSelectorEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetTriggerSelector (TriggerSelectorEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTriggerSelectorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetTriggerSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_TriggerSelectorFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("TriggerSelector", m_TriggerSelectorFeature);
		if (result != VmbErrorSuccess)
		{
			m_TriggerSelectorFeature.reset();
			return result;
		}
	}
	feature = m_TriggerSelectorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetTriggerMode (TriggerModeEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTriggerModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (TriggerModeEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetTriggerMode (TriggerModeEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTriggerModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetTriggerModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_TriggerModeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("TriggerMode", m_TriggerModeFeature);
		if (result != VmbErrorSuccess)
		{
			m_TriggerModeFeature.reset();
			return result;
		}
	}
	feature = m_TriggerModeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetStartExposureTimer (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStartExposureTimerFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetStartExposureTimer (bool value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStartExposureTimerFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetStartExposureTimerFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_StartExposureTimerFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("StartExposureTimer", m_StartExposureTimerFeature);
		if (result != VmbErrorSuccess)
		{
			m_StartExposureTimerFeature.reset();
			return result;
		}
	}
	feature = m_StartExposureTimerFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetExposureTime_Min (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureTime_MinFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetExposureTime_MinFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_ExposureTime_MinFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("ExposureTime_Min", m_ExposureTime_MinFeature);
		if (result != VmbErrorSuccess)
		{
			m_ExposureTime_MinFeature.reset();
			return result;
		}
	}
	feature = m_ExposureTime_MinFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetExposureTime_Max (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureTime_MaxFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetExposureTime_MaxFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_ExposureTime_MaxFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("ExposureTime_Max", m_ExposureTime_MaxFeature);
		if (result != VmbErrorSuccess)
		{
			m_ExposureTime_MaxFeature.reset();
			return result;
		}
	}
	feature = m_ExposureTime_MaxFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetExposureTimeGranularity (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureTimeGranularityFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetExposureTimeGranularity (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureTimeGranularityFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetExposureTimeGranularityFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_ExposureTimeGranularityFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("ExposureTimeGranularity", m_ExposureTimeGranularityFeature);
		if (result != VmbErrorSuccess)
		{
			m_ExposureTimeGranularityFeature.reset();
			return result;
		}
	}
	feature = m_ExposureTimeGranularityFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetExposureTimeAbsMs (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureTimeAbsMsFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetExposureTimeAbsMs (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureTimeAbsMsFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetExposureTimeAbsMsFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_ExposureTimeAbsMsFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("ExposureTimeAbsMs", m_ExposureTimeAbsMsFeature);
		if (result != VmbErrorSuccess)
		{
			m_ExposureTimeAbsMsFeature.reset();
			return result;
		}
	}
	feature = m_ExposureTimeAbsMsFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetExposureTimeAbs (double & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureTimeAbsFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetExposureTimeAbs (double value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureTimeAbsFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetExposureTimeAbsFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_ExposureTimeAbsFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("ExposureTimeAbs", m_ExposureTimeAbsFeature);
		if (result != VmbErrorSuccess)
		{
			m_ExposureTimeAbsFeature.reset();
			return result;
		}
	}
	feature = m_ExposureTimeAbsFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetExposureTime (double & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureTimeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetExposureTime (double value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureTimeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetExposureTimeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_ExposureTimeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("ExposureTime", m_ExposureTimeFeature);
		if (result != VmbErrorSuccess)
		{
			m_ExposureTimeFeature.reset();
			return result;
		}
	}
	feature = m_ExposureTimeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetExposureMode (ExposureModeEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (ExposureModeEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetExposureMode (ExposureModeEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetExposureModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetExposureModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_ExposureModeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("ExposureMode", m_ExposureModeFeature);
		if (result != VmbErrorSuccess)
		{
			m_ExposureModeFeature.reset();
			return result;
		}
	}
	feature = m_ExposureModeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetDarkTime_Min (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDarkTime_MinFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetDarkTime_MinFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_DarkTime_MinFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("DarkTime_Min", m_DarkTime_MinFeature);
		if (result != VmbErrorSuccess)
		{
			m_DarkTime_MinFeature.reset();
			return result;
		}
	}
	feature = m_DarkTime_MinFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetDarkTime_Max (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDarkTime_MaxFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetDarkTime_MaxFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_DarkTime_MaxFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("DarkTime_Max", m_DarkTime_MaxFeature);
		if (result != VmbErrorSuccess)
		{
			m_DarkTime_MaxFeature.reset();
			return result;
		}
	}
	feature = m_DarkTime_MaxFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetDarkTimeGranularity (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDarkTimeGranularityFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetDarkTimeGranularity (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDarkTimeGranularityFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetDarkTimeGranularityFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_DarkTimeGranularityFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("DarkTimeGranularity", m_DarkTimeGranularityFeature);
		if (result != VmbErrorSuccess)
		{
			m_DarkTimeGranularityFeature.reset();
			return result;
		}
	}
	feature = m_DarkTimeGranularityFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetDarkTimeAbsMs (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDarkTimeAbsMsFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetDarkTimeAbsMs (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDarkTimeAbsMsFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetDarkTimeAbsMsFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_DarkTimeAbsMsFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("DarkTimeAbsMs", m_DarkTimeAbsMsFeature);
		if (result != VmbErrorSuccess)
		{
			m_DarkTimeAbsMsFeature.reset();
			return result;
		}
	}
	feature = m_DarkTimeAbsMsFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetDarkTimeAbs (double & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDarkTimeAbsFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetDarkTimeAbs (double value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDarkTimeAbsFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetDarkTimeAbsFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_DarkTimeAbsFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("DarkTimeAbs", m_DarkTimeAbsFeature);
		if (result != VmbErrorSuccess)
		{
			m_DarkTimeAbsFeature.reset();
			return result;
		}
	}
	feature = m_DarkTimeAbsFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetDarkTime (double & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDarkTimeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetDarkTime (double value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDarkTimeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetDarkTimeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_DarkTimeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("DarkTime", m_DarkTimeFeature);
		if (result != VmbErrorSuccess)
		{
			m_DarkTimeFeature.reset();
			return result;
		}
	}
	feature = m_DarkTimeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::AcquisitionStop ()
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetAcquisitionStopFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand ();
	return result;
}
VmbErrorType GoldeyeCamera::GetAcquisitionStopFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_AcquisitionStopFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("AcquisitionStop", m_AcquisitionStopFeature);
		if (result != VmbErrorSuccess)
		{
			m_AcquisitionStopFeature.reset();
			return result;
		}
	}
	feature = m_AcquisitionStopFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::AcquisitionStart ()
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetAcquisitionStartFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand ();
	return result;
}
VmbErrorType GoldeyeCamera::GetAcquisitionStartFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_AcquisitionStartFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("AcquisitionStart", m_AcquisitionStartFeature);
		if (result != VmbErrorSuccess)
		{
			m_AcquisitionStartFeature.reset();
			return result;
		}
	}
	feature = m_AcquisitionStartFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetAcquisitionMode (AcquisitionModeEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetAcquisitionModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (AcquisitionModeEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetAcquisitionMode (AcquisitionModeEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetAcquisitionModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetAcquisitionModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_AcquisitionModeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("AcquisitionMode", m_AcquisitionModeFeature);
		if (result != VmbErrorSuccess)
		{
			m_AcquisitionModeFeature.reset();
			return result;
		}
	}
	feature = m_AcquisitionModeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetAcquisitionFrameCount (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetAcquisitionFrameCountFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetAcquisitionFrameCount (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetAcquisitionFrameCountFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetAcquisitionFrameCountFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_AcquisitionFrameCountFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("AcquisitionFrameCount", m_AcquisitionFrameCountFeature);
		if (result != VmbErrorSuccess)
		{
			m_AcquisitionFrameCountFeature.reset();
			return result;
		}
	}
	feature = m_AcquisitionFrameCountFeature;
	return VmbErrorSuccess;
}


// Category /AnalogControl
VmbErrorType GoldeyeCamera::GetGain (double & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGain (double value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGainFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GainFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("Gain", m_GainFeature);
		if (result != VmbErrorSuccess)
		{
			m_GainFeature.reset();
			return result;
		}
	}
	feature = m_GainFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGainRaw (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainRawFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGainRaw (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGainRawFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGainRawFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GainRawFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GainRaw", m_GainRawFeature);
		if (result != VmbErrorSuccess)
		{
			m_GainRawFeature.reset();
			return result;
		}
	}
	feature = m_GainRawFeature;
	return VmbErrorSuccess;
}


// Category /BufferHandlingControl
VmbErrorType GoldeyeCamera::GetStreamAnnounceBufferMinimum (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStreamAnnounceBufferMinimumFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetStreamAnnounceBufferMinimumFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_StreamAnnounceBufferMinimumFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("StreamAnnounceBufferMinimum", m_StreamAnnounceBufferMinimumFeature);
		if (result != VmbErrorSuccess)
		{
			m_StreamAnnounceBufferMinimumFeature.reset();
			return result;
		}
	}
	feature = m_StreamAnnounceBufferMinimumFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetStreamAnnouncedBufferCount (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStreamAnnouncedBufferCountFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetStreamAnnouncedBufferCountFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_StreamAnnouncedBufferCountFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("StreamAnnouncedBufferCount", m_StreamAnnouncedBufferCountFeature);
		if (result != VmbErrorSuccess)
		{
			m_StreamAnnouncedBufferCountFeature.reset();
			return result;
		}
	}
	feature = m_StreamAnnouncedBufferCountFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetStreamBufferHandlingMode (StreamBufferHandlingModeEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStreamBufferHandlingModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (StreamBufferHandlingModeEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetStreamBufferHandlingMode (StreamBufferHandlingModeEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStreamBufferHandlingModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetStreamBufferHandlingModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_StreamBufferHandlingModeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("StreamBufferHandlingMode", m_StreamBufferHandlingModeFeature);
		if (result != VmbErrorSuccess)
		{
			m_StreamBufferHandlingModeFeature.reset();
			return result;
		}
	}
	feature = m_StreamBufferHandlingModeFeature;
	return VmbErrorSuccess;
}


// Category /CameraSpecialFeatures
VmbErrorType GoldeyeCamera::AutoCalibrateOnce ()
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetAutoCalibrateOnceFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand ();
	return result;
}
VmbErrorType GoldeyeCamera::GetAutoCalibrateOnceFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_AutoCalibrateOnceFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("AutoCalibrateOnce", m_AutoCalibrateOnceFeature);
		if (result != VmbErrorSuccess)
		{
			m_AutoCalibrateOnceFeature.reset();
			return result;
		}
	}
	feature = m_AutoCalibrateOnceFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetAutoCalibrationInterval (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetAutoCalibrationIntervalFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetAutoCalibrationInterval (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetAutoCalibrationIntervalFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetAutoCalibrationIntervalFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_AutoCalibrationIntervalFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("AutoCalibrationInterval", m_AutoCalibrationIntervalFeature);
		if (result != VmbErrorSuccess)
		{
			m_AutoCalibrationIntervalFeature.reset();
			return result;
		}
	}
	feature = m_AutoCalibrationIntervalFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetAutoCalibrationMode (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetAutoCalibrationModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetAutoCalibrationMode (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetAutoCalibrationModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetAutoCalibrationModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_AutoCalibrationModeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("AutoCalibrationMode", m_AutoCalibrationModeFeature);
		if (result != VmbErrorSuccess)
		{
			m_AutoCalibrationModeFeature.reset();
			return result;
		}
	}
	feature = m_AutoCalibrationModeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetCorrectionDataSet (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetCorrectionDataSetFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetCorrectionDataSet (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetCorrectionDataSetFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetCorrectionDataSetFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_CorrectionDataSetFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("CorrectionDataSet", m_CorrectionDataSetFeature);
		if (result != VmbErrorSuccess)
		{
			m_CorrectionDataSetFeature.reset();
			return result;
		}
	}
	feature = m_CorrectionDataSetFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::FlushSerial ()
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetFlushSerialFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand ();
	return result;
}
VmbErrorType GoldeyeCamera::GetFlushSerialFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_FlushSerialFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("FlushSerial", m_FlushSerialFeature);
		if (result != VmbErrorSuccess)
		{
			m_FlushSerialFeature.reset();
			return result;
		}
	}
	feature = m_FlushSerialFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::ParameterDump ()
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetParameterDumpFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand ();
	return result;
}
VmbErrorType GoldeyeCamera::GetParameterDumpFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_ParameterDumpFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("ParameterDump", m_ParameterDumpFeature);
		if (result != VmbErrorSuccess)
		{
			m_ParameterDumpFeature.reset();
			return result;
		}
	}
	feature = m_ParameterDumpFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::QuerySensorTemperatureState ()
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetQuerySensorTemperatureStateFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand ();
	return result;
}
VmbErrorType GoldeyeCamera::GetQuerySensorTemperatureStateFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_QuerySensorTemperatureStateFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("QuerySensorTemperatureState", m_QuerySensorTemperatureStateFeature);
		if (result != VmbErrorSuccess)
		{
			m_QuerySensorTemperatureStateFeature.reset();
			return result;
		}
	}
	feature = m_QuerySensorTemperatureStateFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::ReloadCameraSpecialFeatures ()
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetReloadCameraSpecialFeaturesFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand ();
	return result;
}
VmbErrorType GoldeyeCamera::GetReloadCameraSpecialFeaturesFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_ReloadCameraSpecialFeaturesFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("ReloadCameraSpecialFeatures", m_ReloadCameraSpecialFeaturesFeature);
		if (result != VmbErrorSuccess)
		{
			m_ReloadCameraSpecialFeaturesFeature.reset();
			return result;
		}
	}
	feature = m_ReloadCameraSpecialFeaturesFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetSensorTemperatureState (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSensorTemperatureStateFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetSensorTemperatureStateFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_SensorTemperatureStateFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("SensorTemperatureState", m_SensorTemperatureStateFeature);
		if (result != VmbErrorSuccess)
		{
			m_SensorTemperatureStateFeature.reset();
			return result;
		}
	}
	feature = m_SensorTemperatureStateFeature;
	return VmbErrorSuccess;
}


// Category /CameraSpecialFeatures/BackgroundCorrection
VmbErrorType GoldeyeCamera::GetBGC_OffsetValue (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetBGC_OffsetValueFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetBGC_OffsetValue (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetBGC_OffsetValueFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetBGC_OffsetValueFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_BGC_OffsetValueFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("BGC_OffsetValue", m_BGC_OffsetValueFeature);
		if (result != VmbErrorSuccess)
		{
			m_BGC_OffsetValueFeature.reset();
			return result;
		}
	}
	feature = m_BGC_OffsetValueFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetBGC_OperationMode (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetBGC_OperationModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetBGC_OperationMode (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetBGC_OperationModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetBGC_OperationModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_BGC_OperationModeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("BGC_OperationMode", m_BGC_OperationModeFeature);
		if (result != VmbErrorSuccess)
		{
			m_BGC_OperationModeFeature.reset();
			return result;
		}
	}
	feature = m_BGC_OperationModeFeature;
	return VmbErrorSuccess;
}


// Category /CameraSpecialFeatures/BadPixelCorrection
VmbErrorType GoldeyeCamera::GetBPC_CorrectionData_FileNumber (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetBPC_CorrectionData_FileNumberFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetBPC_CorrectionData_FileNumberFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_BPC_CorrectionData_FileNumberFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("BPC_CorrectionData_FileNumber", m_BPC_CorrectionData_FileNumberFeature);
		if (result != VmbErrorSuccess)
		{
			m_BPC_CorrectionData_FileNumberFeature.reset();
			return result;
		}
	}
	feature = m_BPC_CorrectionData_FileNumberFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetBPC_OperationMode (BPC_OperationModeEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetBPC_OperationModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (BPC_OperationModeEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetBPC_OperationMode (BPC_OperationModeEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetBPC_OperationModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetBPC_OperationModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_BPC_OperationModeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("BPC_OperationMode", m_BPC_OperationModeFeature);
		if (result != VmbErrorSuccess)
		{
			m_BPC_OperationModeFeature.reset();
			return result;
		}
	}
	feature = m_BPC_OperationModeFeature;
	return VmbErrorSuccess;
}


// Category /CameraSpecialFeatures/IntegratorAndImageStore
VmbErrorType GoldeyeCamera::GetIIS_OperationMode (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetIIS_OperationModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetIIS_OperationMode (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetIIS_OperationModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetIIS_OperationModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_IIS_OperationModeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("IIS_OperationMode", m_IIS_OperationModeFeature);
		if (result != VmbErrorSuccess)
		{
			m_IIS_OperationModeFeature.reset();
			return result;
		}
	}
	feature = m_IIS_OperationModeFeature;
	return VmbErrorSuccess;
}


// Category /CameraSpecialFeatures/LUT
VmbErrorType GoldeyeCamera::GetLUT_CorrectionData_FileNumber (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetLUT_CorrectionData_FileNumberFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetLUT_CorrectionData_FileNumberFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_LUT_CorrectionData_FileNumberFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("LUT_CorrectionData_FileNumber", m_LUT_CorrectionData_FileNumberFeature);
		if (result != VmbErrorSuccess)
		{
			m_LUT_CorrectionData_FileNumberFeature.reset();
			return result;
		}
	}
	feature = m_LUT_CorrectionData_FileNumberFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetLUT_OperationMode (LUT_OperationModeEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetLUT_OperationModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (LUT_OperationModeEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetLUT_OperationMode (LUT_OperationModeEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetLUT_OperationModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetLUT_OperationModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_LUT_OperationModeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("LUT_OperationMode", m_LUT_OperationModeFeature);
		if (result != VmbErrorSuccess)
		{
			m_LUT_OperationModeFeature.reset();
			return result;
		}
	}
	feature = m_LUT_OperationModeFeature;
	return VmbErrorSuccess;
}


// Category /CameraSpecialFeatures/TwoPointCorrection
VmbErrorType GoldeyeCamera::GetTPC_CorrectionData_FileNumber (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTPC_CorrectionData_FileNumberFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetTPC_CorrectionData_FileNumberFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_TPC_CorrectionData_FileNumberFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("TPC_CorrectionData_FileNumber", m_TPC_CorrectionData_FileNumberFeature);
		if (result != VmbErrorSuccess)
		{
			m_TPC_CorrectionData_FileNumberFeature.reset();
			return result;
		}
	}
	feature = m_TPC_CorrectionData_FileNumberFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetTPC_FirstImage_HighRef (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTPC_FirstImage_HighRefFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetTPC_FirstImage_HighRefFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_TPC_FirstImage_HighRefFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("TPC_FirstImage_HighRef", m_TPC_FirstImage_HighRefFeature);
		if (result != VmbErrorSuccess)
		{
			m_TPC_FirstImage_HighRefFeature.reset();
			return result;
		}
	}
	feature = m_TPC_FirstImage_HighRefFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetTPC_FirstImage_LowRef (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTPC_FirstImage_LowRefFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetTPC_FirstImage_LowRefFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_TPC_FirstImage_LowRefFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("TPC_FirstImage_LowRef", m_TPC_FirstImage_LowRefFeature);
		if (result != VmbErrorSuccess)
		{
			m_TPC_FirstImage_LowRefFeature.reset();
			return result;
		}
	}
	feature = m_TPC_FirstImage_LowRefFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetTPC_OperationMode (TPC_OperationModeEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTPC_OperationModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (TPC_OperationModeEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetTPC_OperationMode (TPC_OperationModeEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTPC_OperationModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetTPC_OperationModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_TPC_OperationModeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("TPC_OperationMode", m_TPC_OperationModeFeature);
		if (result != VmbErrorSuccess)
		{
			m_TPC_OperationModeFeature.reset();
			return result;
		}
	}
	feature = m_TPC_OperationModeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetTPC_SetValue_HighRef (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTPC_SetValue_HighRefFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetTPC_SetValue_HighRefFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_TPC_SetValue_HighRefFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("TPC_SetValue_HighRef", m_TPC_SetValue_HighRefFeature);
		if (result != VmbErrorSuccess)
		{
			m_TPC_SetValue_HighRefFeature.reset();
			return result;
		}
	}
	feature = m_TPC_SetValue_HighRefFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetTPC_SetValue_LowRef (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTPC_SetValue_LowRefFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetTPC_SetValue_LowRefFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_TPC_SetValue_LowRefFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("TPC_SetValue_LowRef", m_TPC_SetValue_LowRefFeature);
		if (result != VmbErrorSuccess)
		{
			m_TPC_SetValue_LowRefFeature.reset();
			return result;
		}
	}
	feature = m_TPC_SetValue_LowRefFeature;
	return VmbErrorSuccess;
}


// Category /CounterAndTimerControl
VmbErrorType GoldeyeCamera::GetCounterDecrementEventSource (CounterDecrementEventSourceEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetCounterDecrementEventSourceFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (CounterDecrementEventSourceEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetCounterDecrementEventSource (CounterDecrementEventSourceEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetCounterDecrementEventSourceFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetCounterDecrementEventSourceFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_CounterDecrementEventSourceFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("CounterDecrementEventSource", m_CounterDecrementEventSourceFeature);
		if (result != VmbErrorSuccess)
		{
			m_CounterDecrementEventSourceFeature.reset();
			return result;
		}
	}
	feature = m_CounterDecrementEventSourceFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetCounterResetActivation (CounterResetActivationEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetCounterResetActivationFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (CounterResetActivationEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetCounterResetActivation (CounterResetActivationEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetCounterResetActivationFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetCounterResetActivationFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_CounterResetActivationFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("CounterResetActivation", m_CounterResetActivationFeature);
		if (result != VmbErrorSuccess)
		{
			m_CounterResetActivationFeature.reset();
			return result;
		}
	}
	feature = m_CounterResetActivationFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetCounterResetSource (CounterResetSourceEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetCounterResetSourceFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (CounterResetSourceEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetCounterResetSource (CounterResetSourceEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetCounterResetSourceFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetCounterResetSourceFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_CounterResetSourceFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("CounterResetSource", m_CounterResetSourceFeature);
		if (result != VmbErrorSuccess)
		{
			m_CounterResetSourceFeature.reset();
			return result;
		}
	}
	feature = m_CounterResetSourceFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetTimerDelayRaw (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTimerDelayRawFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetTimerDelayRaw (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTimerDelayRawFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetTimerDelayRawFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_TimerDelayRawFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("TimerDelayRaw", m_TimerDelayRawFeature);
		if (result != VmbErrorSuccess)
		{
			m_TimerDelayRawFeature.reset();
			return result;
		}
	}
	feature = m_TimerDelayRawFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetTimerDurationRaw (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTimerDurationRawFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetTimerDurationRaw (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTimerDurationRawFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetTimerDurationRawFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_TimerDurationRawFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("TimerDurationRaw", m_TimerDurationRawFeature);
		if (result != VmbErrorSuccess)
		{
			m_TimerDurationRawFeature.reset();
			return result;
		}
	}
	feature = m_TimerDurationRawFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetTimerGranularityFactor (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTimerGranularityFactorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetTimerGranularityFactor (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTimerGranularityFactorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetTimerGranularityFactorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_TimerGranularityFactorFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("TimerGranularityFactor", m_TimerGranularityFactorFeature);
		if (result != VmbErrorSuccess)
		{
			m_TimerGranularityFactorFeature.reset();
			return result;
		}
	}
	feature = m_TimerGranularityFactorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetTimerSelector (TimerSelectorEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTimerSelectorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (TimerSelectorEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetTimerSelector (TimerSelectorEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTimerSelectorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetTimerSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_TimerSelectorFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("TimerSelector", m_TimerSelectorFeature);
		if (result != VmbErrorSuccess)
		{
			m_TimerSelectorFeature.reset();
			return result;
		}
	}
	feature = m_TimerSelectorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetTimerTriggerActivation (TimerTriggerActivationEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTimerTriggerActivationFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (TimerTriggerActivationEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetTimerTriggerActivation (TimerTriggerActivationEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTimerTriggerActivationFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetTimerTriggerActivationFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_TimerTriggerActivationFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("TimerTriggerActivation", m_TimerTriggerActivationFeature);
		if (result != VmbErrorSuccess)
		{
			m_TimerTriggerActivationFeature.reset();
			return result;
		}
	}
	feature = m_TimerTriggerActivationFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetTimerTriggerSource (TimerTriggerSourceEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTimerTriggerSourceFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (TimerTriggerSourceEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetTimerTriggerSource (TimerTriggerSourceEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTimerTriggerSourceFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetTimerTriggerSourceFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_TimerTriggerSourceFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("TimerTriggerSource", m_TimerTriggerSourceFeature);
		if (result != VmbErrorSuccess)
		{
			m_TimerTriggerSourceFeature.reset();
			return result;
		}
	}
	feature = m_TimerTriggerSourceFeature;
	return VmbErrorSuccess;
}


// Category /DeviceControl
VmbErrorType GoldeyeCamera::GetDeviceID (std::string & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDeviceIDFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetDeviceIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_DeviceIDFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("DeviceID", m_DeviceIDFeature);
		if (result != VmbErrorSuccess)
		{
			m_DeviceIDFeature.reset();
			return result;
		}
	}
	feature = m_DeviceIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetDeviceManufacturerInfo (std::string & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDeviceManufacturerInfoFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetDeviceManufacturerInfoFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_DeviceManufacturerInfoFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("DeviceManufacturerInfo", m_DeviceManufacturerInfoFeature);
		if (result != VmbErrorSuccess)
		{
			m_DeviceManufacturerInfoFeature.reset();
			return result;
		}
	}
	feature = m_DeviceManufacturerInfoFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetDeviceModelName (std::string & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDeviceModelNameFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetDeviceModelNameFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_DeviceModelNameFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("DeviceModelName", m_DeviceModelNameFeature);
		if (result != VmbErrorSuccess)
		{
			m_DeviceModelNameFeature.reset();
			return result;
		}
	}
	feature = m_DeviceModelNameFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetDeviceScanType (DeviceScanTypeEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDeviceScanTypeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (DeviceScanTypeEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetDeviceScanType (DeviceScanTypeEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDeviceScanTypeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetDeviceScanTypeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_DeviceScanTypeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("DeviceScanType", m_DeviceScanTypeFeature);
		if (result != VmbErrorSuccess)
		{
			m_DeviceScanTypeFeature.reset();
			return result;
		}
	}
	feature = m_DeviceScanTypeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetDeviceUserID (std::string & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDeviceUserIDFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetDeviceUserID (const char * value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDeviceUserIDFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetDeviceUserIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_DeviceUserIDFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("DeviceUserID", m_DeviceUserIDFeature);
		if (result != VmbErrorSuccess)
		{
			m_DeviceUserIDFeature.reset();
			return result;
		}
	}
	feature = m_DeviceUserIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetDeviceVendorName (std::string & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDeviceVendorNameFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetDeviceVendorNameFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_DeviceVendorNameFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("DeviceVendorName", m_DeviceVendorNameFeature);
		if (result != VmbErrorSuccess)
		{
			m_DeviceVendorNameFeature.reset();
			return result;
		}
	}
	feature = m_DeviceVendorNameFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetDeviceVersion (std::string & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDeviceVersionFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetDeviceVersionFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_DeviceVersionFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("DeviceVersion", m_DeviceVersionFeature);
		if (result != VmbErrorSuccess)
		{
			m_DeviceVersionFeature.reset();
			return result;
		}
	}
	feature = m_DeviceVersionFeature;
	return VmbErrorSuccess;
}


// Category /EventControl
VmbErrorType GoldeyeCamera::GetEventNotification (EventNotificationEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventNotificationFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (EventNotificationEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetEventNotification (EventNotificationEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventNotificationFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetEventNotificationFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_EventNotificationFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("EventNotification", m_EventNotificationFeature);
		if (result != VmbErrorSuccess)
		{
			m_EventNotificationFeature.reset();
			return result;
		}
	}
	feature = m_EventNotificationFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetEventSelector (EventSelectorEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventSelectorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (EventSelectorEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetEventSelector (EventSelectorEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetEventSelectorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetEventSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_EventSelectorFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("EventSelector", m_EventSelectorFeature);
		if (result != VmbErrorSuccess)
		{
			m_EventSelectorFeature.reset();
			return result;
		}
	}
	feature = m_EventSelectorFeature;
	return VmbErrorSuccess;
}


// Category /GigE
VmbErrorType GoldeyeCamera::GetGevSCPSPacketSize (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCPSPacketSizeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevSCPSPacketSize (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCPSPacketSizeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSCPSPacketSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSCPSPacketSizeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSCPSPacketSize", m_GevSCPSPacketSizeFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSCPSPacketSizeFeature.reset();
			return result;
		}
	}
	feature = m_GevSCPSPacketSizeFeature;
	return VmbErrorSuccess;
}


// Category /GigE/Configuration
VmbErrorType GoldeyeCamera::GetGevIPConfigurationMode (GevIPConfigurationModeEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevIPConfigurationModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (GevIPConfigurationModeEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::GetGevIPConfigurationModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevIPConfigurationModeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevIPConfigurationMode", m_GevIPConfigurationModeFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevIPConfigurationModeFeature.reset();
			return result;
		}
	}
	feature = m_GevIPConfigurationModeFeature;
	return VmbErrorSuccess;
}


// Category /GigE/Current
VmbErrorType GoldeyeCamera::GetGevCurrentDefaultGateway (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevCurrentDefaultGatewayFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevCurrentDefaultGatewayFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevCurrentDefaultGatewayFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevCurrentDefaultGateway", m_GevCurrentDefaultGatewayFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevCurrentDefaultGatewayFeature.reset();
			return result;
		}
	}
	feature = m_GevCurrentDefaultGatewayFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevCurrentIPAddress (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevCurrentIPAddressFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevCurrentIPAddressFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevCurrentIPAddressFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevCurrentIPAddress", m_GevCurrentIPAddressFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevCurrentIPAddressFeature.reset();
			return result;
		}
	}
	feature = m_GevCurrentIPAddressFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevCurrentSubnetMask (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevCurrentSubnetMaskFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevCurrentSubnetMaskFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevCurrentSubnetMaskFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevCurrentSubnetMask", m_GevCurrentSubnetMaskFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevCurrentSubnetMaskFeature.reset();
			return result;
		}
	}
	feature = m_GevCurrentSubnetMaskFeature;
	return VmbErrorSuccess;
}


// Category /GigE/GVCP
VmbErrorType GoldeyeCamera::GetGVCPCmdRetries (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVCPCmdRetriesFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGVCPCmdRetries (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVCPCmdRetriesFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGVCPCmdRetriesFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GVCPCmdRetriesFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GVCPCmdRetries", m_GVCPCmdRetriesFeature);
		if (result != VmbErrorSuccess)
		{
			m_GVCPCmdRetriesFeature.reset();
			return result;
		}
	}
	feature = m_GVCPCmdRetriesFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGVCPCmdTimeout (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVCPCmdTimeoutFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGVCPCmdTimeout (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVCPCmdTimeoutFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGVCPCmdTimeoutFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GVCPCmdTimeoutFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GVCPCmdTimeout", m_GVCPCmdTimeoutFeature);
		if (result != VmbErrorSuccess)
		{
			m_GVCPCmdTimeoutFeature.reset();
			return result;
		}
	}
	feature = m_GVCPCmdTimeoutFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevHeartbeatInterval (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevHeartbeatIntervalFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevHeartbeatInterval (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevHeartbeatIntervalFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevHeartbeatIntervalFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevHeartbeatIntervalFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevHeartbeatInterval", m_GevHeartbeatIntervalFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevHeartbeatIntervalFeature.reset();
			return result;
		}
	}
	feature = m_GevHeartbeatIntervalFeature;
	return VmbErrorSuccess;
}


// Category /GigE/Persistent
VmbErrorType GoldeyeCamera::GetGevPersistentDefaultGateway (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevPersistentDefaultGatewayFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevPersistentDefaultGatewayFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevPersistentDefaultGatewayFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevPersistentDefaultGateway", m_GevPersistentDefaultGatewayFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevPersistentDefaultGatewayFeature.reset();
			return result;
		}
	}
	feature = m_GevPersistentDefaultGatewayFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevPersistentIPAddress (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevPersistentIPAddressFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevPersistentIPAddressFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevPersistentIPAddressFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevPersistentIPAddress", m_GevPersistentIPAddressFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevPersistentIPAddressFeature.reset();
			return result;
		}
	}
	feature = m_GevPersistentIPAddressFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevPersistentSubnetMask (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevPersistentSubnetMaskFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevPersistentSubnetMaskFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevPersistentSubnetMaskFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevPersistentSubnetMask", m_GevPersistentSubnetMaskFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevPersistentSubnetMaskFeature.reset();
			return result;
		}
	}
	feature = m_GevPersistentSubnetMaskFeature;
	return VmbErrorSuccess;
}


// Category /IPEngine
VmbErrorType GoldeyeCamera::GetIPEngineDeviceID (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetIPEngineDeviceIDFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetIPEngineDeviceIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_IPEngineDeviceIDFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("IPEngineDeviceID", m_IPEngineDeviceIDFeature);
		if (result != VmbErrorSuccess)
		{
			m_IPEngineDeviceIDFeature.reset();
			return result;
		}
	}
	feature = m_IPEngineDeviceIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetIPEngineFirmwareVersionMajor (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetIPEngineFirmwareVersionMajorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetIPEngineFirmwareVersionMajorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_IPEngineFirmwareVersionMajorFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("IPEngineFirmwareVersionMajor", m_IPEngineFirmwareVersionMajorFeature);
		if (result != VmbErrorSuccess)
		{
			m_IPEngineFirmwareVersionMajorFeature.reset();
			return result;
		}
	}
	feature = m_IPEngineFirmwareVersionMajorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetIPEngineFirmwareVersionMinor (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetIPEngineFirmwareVersionMinorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetIPEngineFirmwareVersionMinorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_IPEngineFirmwareVersionMinorFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("IPEngineFirmwareVersionMinor", m_IPEngineFirmwareVersionMinorFeature);
		if (result != VmbErrorSuccess)
		{
			m_IPEngineFirmwareVersionMinorFeature.reset();
			return result;
		}
	}
	feature = m_IPEngineFirmwareVersionMinorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetIPEngineFirmwareVersionSubminor (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetIPEngineFirmwareVersionSubminorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetIPEngineFirmwareVersionSubminorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_IPEngineFirmwareVersionSubminorFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("IPEngineFirmwareVersionSubminor", m_IPEngineFirmwareVersionSubminorFeature);
		if (result != VmbErrorSuccess)
		{
			m_IPEngineFirmwareVersionSubminorFeature.reset();
			return result;
		}
	}
	feature = m_IPEngineFirmwareVersionSubminorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetIPEngineInitSequenceStatus (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetIPEngineInitSequenceStatusFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetIPEngineInitSequenceStatusFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_IPEngineInitSequenceStatusFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("IPEngineInitSequenceStatus", m_IPEngineInitSequenceStatusFeature);
		if (result != VmbErrorSuccess)
		{
			m_IPEngineInitSequenceStatusFeature.reset();
			return result;
		}
	}
	feature = m_IPEngineInitSequenceStatusFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetIPEngineModuleID (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetIPEngineModuleIDFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetIPEngineModuleIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_IPEngineModuleIDFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("IPEngineModuleID", m_IPEngineModuleIDFeature);
		if (result != VmbErrorSuccess)
		{
			m_IPEngineModuleIDFeature.reset();
			return result;
		}
	}
	feature = m_IPEngineModuleIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetIPEngineSubModuleID (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetIPEngineSubModuleIDFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetIPEngineSubModuleIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_IPEngineSubModuleIDFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("IPEngineSubModuleID", m_IPEngineSubModuleIDFeature);
		if (result != VmbErrorSuccess)
		{
			m_IPEngineSubModuleIDFeature.reset();
			return result;
		}
	}
	feature = m_IPEngineSubModuleIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetIPEngineVendorID (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetIPEngineVendorIDFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetIPEngineVendorIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_IPEngineVendorIDFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("IPEngineVendorID", m_IPEngineVendorIDFeature);
		if (result != VmbErrorSuccess)
		{
			m_IPEngineVendorIDFeature.reset();
			return result;
		}
	}
	feature = m_IPEngineVendorIDFeature;
	return VmbErrorSuccess;
}


// Category /IPEngine/Grabber/Channel0/AcquisitionConfiguration
VmbErrorType GoldeyeCamera::GetGrbCh0AcqCfgIncludeMetadataInImage (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0AcqCfgIncludeMetadataInImageFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGrbCh0AcqCfgIncludeMetadataInImage (bool value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0AcqCfgIncludeMetadataInImageFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGrbCh0AcqCfgIncludeMetadataInImageFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GrbCh0AcqCfgIncludeMetadataInImageFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GrbCh0AcqCfgIncludeMetadataInImage", m_GrbCh0AcqCfgIncludeMetadataInImageFeature);
		if (result != VmbErrorSuccess)
		{
			m_GrbCh0AcqCfgIncludeMetadataInImageFeature.reset();
			return result;
		}
	}
	feature = m_GrbCh0AcqCfgIncludeMetadataInImageFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGrbCh0AcqCfgInvertPixelData (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0AcqCfgInvertPixelDataFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGrbCh0AcqCfgInvertPixelData (bool value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0AcqCfgInvertPixelDataFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGrbCh0AcqCfgInvertPixelDataFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GrbCh0AcqCfgInvertPixelDataFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GrbCh0AcqCfgInvertPixelData", m_GrbCh0AcqCfgInvertPixelDataFeature);
		if (result != VmbErrorSuccess)
		{
			m_GrbCh0AcqCfgInvertPixelDataFeature.reset();
			return result;
		}
	}
	feature = m_GrbCh0AcqCfgInvertPixelDataFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGrbCh0AcqCfgMemoryWaterLevel (GrbCh0AcqCfgMemoryWaterLevelEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0AcqCfgMemoryWaterLevelFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (GrbCh0AcqCfgMemoryWaterLevelEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetGrbCh0AcqCfgMemoryWaterLevel (GrbCh0AcqCfgMemoryWaterLevelEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0AcqCfgMemoryWaterLevelFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGrbCh0AcqCfgMemoryWaterLevelFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GrbCh0AcqCfgMemoryWaterLevelFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GrbCh0AcqCfgMemoryWaterLevel", m_GrbCh0AcqCfgMemoryWaterLevelFeature);
		if (result != VmbErrorSuccess)
		{
			m_GrbCh0AcqCfgMemoryWaterLevelFeature.reset();
			return result;
		}
	}
	feature = m_GrbCh0AcqCfgMemoryWaterLevelFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGrbCh0AcqCfgPixelBusDataPortMapping (GrbCh0AcqCfgPixelBusDataPortMappingEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0AcqCfgPixelBusDataPortMappingFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (GrbCh0AcqCfgPixelBusDataPortMappingEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetGrbCh0AcqCfgPixelBusDataPortMapping (GrbCh0AcqCfgPixelBusDataPortMappingEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0AcqCfgPixelBusDataPortMappingFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGrbCh0AcqCfgPixelBusDataPortMappingFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GrbCh0AcqCfgPixelBusDataPortMappingFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GrbCh0AcqCfgPixelBusDataPortMapping", m_GrbCh0AcqCfgPixelBusDataPortMappingFeature);
		if (result != VmbErrorSuccess)
		{
			m_GrbCh0AcqCfgPixelBusDataPortMappingFeature.reset();
			return result;
		}
	}
	feature = m_GrbCh0AcqCfgPixelBusDataPortMappingFeature;
	return VmbErrorSuccess;
}


// Category /IPEngine/Grabber/Channel0/TriggerConfiguration
VmbErrorType GoldeyeCamera::GetGrbCh0TrigCfgAutomaticInternalRetrigger (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0TrigCfgAutomaticInternalRetriggerFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGrbCh0TrigCfgAutomaticInternalRetrigger (bool value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0TrigCfgAutomaticInternalRetriggerFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGrbCh0TrigCfgAutomaticInternalRetriggerFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GrbCh0TrigCfgAutomaticInternalRetriggerFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GrbCh0TrigCfgAutomaticInternalRetrigger", m_GrbCh0TrigCfgAutomaticInternalRetriggerFeature);
		if (result != VmbErrorSuccess)
		{
			m_GrbCh0TrigCfgAutomaticInternalRetriggerFeature.reset();
			return result;
		}
	}
	feature = m_GrbCh0TrigCfgAutomaticInternalRetriggerFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGrbCh0TrigCfgContinuousPipeCount (GrbCh0TrigCfgContinuousPipeCountEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0TrigCfgContinuousPipeCountFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (GrbCh0TrigCfgContinuousPipeCountEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetGrbCh0TrigCfgContinuousPipeCount (GrbCh0TrigCfgContinuousPipeCountEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0TrigCfgContinuousPipeCountFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGrbCh0TrigCfgContinuousPipeCountFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GrbCh0TrigCfgContinuousPipeCountFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GrbCh0TrigCfgContinuousPipeCount", m_GrbCh0TrigCfgContinuousPipeCountFeature);
		if (result != VmbErrorSuccess)
		{
			m_GrbCh0TrigCfgContinuousPipeCountFeature.reset();
			return result;
		}
	}
	feature = m_GrbCh0TrigCfgContinuousPipeCountFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGrbCh0TrigCfgFrameToSkip (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0TrigCfgFrameToSkipFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGrbCh0TrigCfgFrameToSkip (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0TrigCfgFrameToSkipFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGrbCh0TrigCfgFrameToSkipFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GrbCh0TrigCfgFrameToSkipFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GrbCh0TrigCfgFrameToSkip", m_GrbCh0TrigCfgFrameToSkipFeature);
		if (result != VmbErrorSuccess)
		{
			m_GrbCh0TrigCfgFrameToSkipFeature.reset();
			return result;
		}
	}
	feature = m_GrbCh0TrigCfgFrameToSkipFeature;
	return VmbErrorSuccess;
}


// Category /IPEngine/Grabber/Channel0Extension/GrabberMetadata
VmbErrorType GoldeyeCamera::GetGrbCh0MetadataInsertionMode (GrbCh0MetadataInsertionModeEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0MetadataInsertionModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (GrbCh0MetadataInsertionModeEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetGrbCh0MetadataInsertionMode (GrbCh0MetadataInsertionModeEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0MetadataInsertionModeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGrbCh0MetadataInsertionModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GrbCh0MetadataInsertionModeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GrbCh0MetadataInsertionMode", m_GrbCh0MetadataInsertionModeFeature);
		if (result != VmbErrorSuccess)
		{
			m_GrbCh0MetadataInsertionModeFeature.reset();
			return result;
		}
	}
	feature = m_GrbCh0MetadataInsertionModeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGrbCh0MetadataMsbOverride (GrbCh0MetadataMsbOverrideEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0MetadataMsbOverrideFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (GrbCh0MetadataMsbOverrideEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetGrbCh0MetadataMsbOverride (GrbCh0MetadataMsbOverrideEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0MetadataMsbOverrideFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGrbCh0MetadataMsbOverrideFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GrbCh0MetadataMsbOverrideFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GrbCh0MetadataMsbOverride", m_GrbCh0MetadataMsbOverrideFeature);
		if (result != VmbErrorSuccess)
		{
			m_GrbCh0MetadataMsbOverrideFeature.reset();
			return result;
		}
	}
	feature = m_GrbCh0MetadataMsbOverrideFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGrbCh0MetadataSourceSelection (GrbCh0MetadataSourceSelectionEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0MetadataSourceSelectionFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (GrbCh0MetadataSourceSelectionEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetGrbCh0MetadataSourceSelection (GrbCh0MetadataSourceSelectionEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGrbCh0MetadataSourceSelectionFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGrbCh0MetadataSourceSelectionFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GrbCh0MetadataSourceSelectionFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GrbCh0MetadataSourceSelection", m_GrbCh0MetadataSourceSelectionFeature);
		if (result != VmbErrorSuccess)
		{
			m_GrbCh0MetadataSourceSelectionFeature.reset();
			return result;
		}
	}
	feature = m_GrbCh0MetadataSourceSelectionFeature;
	return VmbErrorSuccess;
}


// Category /IPEngine/PortCommunication/Uart0
VmbErrorType GoldeyeCamera::GetUart0BaudRate (Uart0BaudRateEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart0BaudRateFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (Uart0BaudRateEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetUart0BaudRate (Uart0BaudRateEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart0BaudRateFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetUart0BaudRateFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_Uart0BaudRateFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("Uart0BaudRate", m_Uart0BaudRateFeature);
		if (result != VmbErrorSuccess)
		{
			m_Uart0BaudRateFeature.reset();
			return result;
		}
	}
	feature = m_Uart0BaudRateFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetUart0BaudRateFactor (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart0BaudRateFactorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetUart0BaudRateFactor (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart0BaudRateFactorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetUart0BaudRateFactorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_Uart0BaudRateFactorFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("Uart0BaudRateFactor", m_Uart0BaudRateFactorFeature);
		if (result != VmbErrorSuccess)
		{
			m_Uart0BaudRateFactorFeature.reset();
			return result;
		}
	}
	feature = m_Uart0BaudRateFactorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetUart0BreakDetection (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart0BreakDetectionFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetUart0BreakDetection (bool value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart0BreakDetectionFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetUart0BreakDetectionFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_Uart0BreakDetectionFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("Uart0BreakDetection", m_Uart0BreakDetectionFeature);
		if (result != VmbErrorSuccess)
		{
			m_Uart0BreakDetectionFeature.reset();
			return result;
		}
	}
	feature = m_Uart0BreakDetectionFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetUart0BreakGeneration (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart0BreakGenerationFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetUart0BreakGeneration (bool value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart0BreakGenerationFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetUart0BreakGenerationFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_Uart0BreakGenerationFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("Uart0BreakGeneration", m_Uart0BreakGenerationFeature);
		if (result != VmbErrorSuccess)
		{
			m_Uart0BreakGenerationFeature.reset();
			return result;
		}
	}
	feature = m_Uart0BreakGenerationFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetUart0Loopback (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart0LoopbackFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetUart0Loopback (bool value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart0LoopbackFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetUart0LoopbackFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_Uart0LoopbackFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("Uart0Loopback", m_Uart0LoopbackFeature);
		if (result != VmbErrorSuccess)
		{
			m_Uart0LoopbackFeature.reset();
			return result;
		}
	}
	feature = m_Uart0LoopbackFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetUart0NumOfStopBits (Uart0NumOfStopBitsEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart0NumOfStopBitsFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (Uart0NumOfStopBitsEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetUart0NumOfStopBits (Uart0NumOfStopBitsEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart0NumOfStopBitsFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetUart0NumOfStopBitsFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_Uart0NumOfStopBitsFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("Uart0NumOfStopBits", m_Uart0NumOfStopBitsFeature);
		if (result != VmbErrorSuccess)
		{
			m_Uart0NumOfStopBitsFeature.reset();
			return result;
		}
	}
	feature = m_Uart0NumOfStopBitsFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetUart0Parity (Uart0ParityEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart0ParityFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (Uart0ParityEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetUart0Parity (Uart0ParityEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart0ParityFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetUart0ParityFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_Uart0ParityFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("Uart0Parity", m_Uart0ParityFeature);
		if (result != VmbErrorSuccess)
		{
			m_Uart0ParityFeature.reset();
			return result;
		}
	}
	feature = m_Uart0ParityFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetUart0ReadyToReceive (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart0ReadyToReceiveFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetUart0ReadyToReceive (bool value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart0ReadyToReceiveFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetUart0ReadyToReceiveFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_Uart0ReadyToReceiveFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("Uart0ReadyToReceive", m_Uart0ReadyToReceiveFeature);
		if (result != VmbErrorSuccess)
		{
			m_Uart0ReadyToReceiveFeature.reset();
			return result;
		}
	}
	feature = m_Uart0ReadyToReceiveFeature;
	return VmbErrorSuccess;
}


// Category /IPEngine/PortCommunication/Uart1
VmbErrorType GoldeyeCamera::GetUart1BaudRate (Uart1BaudRateEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart1BaudRateFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (Uart1BaudRateEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetUart1BaudRate (Uart1BaudRateEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart1BaudRateFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetUart1BaudRateFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_Uart1BaudRateFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("Uart1BaudRate", m_Uart1BaudRateFeature);
		if (result != VmbErrorSuccess)
		{
			m_Uart1BaudRateFeature.reset();
			return result;
		}
	}
	feature = m_Uart1BaudRateFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetUart1BaudRateFactor (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart1BaudRateFactorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetUart1BaudRateFactor (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart1BaudRateFactorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetUart1BaudRateFactorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_Uart1BaudRateFactorFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("Uart1BaudRateFactor", m_Uart1BaudRateFactorFeature);
		if (result != VmbErrorSuccess)
		{
			m_Uart1BaudRateFactorFeature.reset();
			return result;
		}
	}
	feature = m_Uart1BaudRateFactorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetUart1BreakDetection (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart1BreakDetectionFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetUart1BreakDetection (bool value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart1BreakDetectionFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetUart1BreakDetectionFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_Uart1BreakDetectionFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("Uart1BreakDetection", m_Uart1BreakDetectionFeature);
		if (result != VmbErrorSuccess)
		{
			m_Uart1BreakDetectionFeature.reset();
			return result;
		}
	}
	feature = m_Uart1BreakDetectionFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetUart1BreakGeneration (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart1BreakGenerationFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetUart1BreakGeneration (bool value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart1BreakGenerationFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetUart1BreakGenerationFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_Uart1BreakGenerationFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("Uart1BreakGeneration", m_Uart1BreakGenerationFeature);
		if (result != VmbErrorSuccess)
		{
			m_Uart1BreakGenerationFeature.reset();
			return result;
		}
	}
	feature = m_Uart1BreakGenerationFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetUart1Loopback (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart1LoopbackFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetUart1Loopback (bool value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart1LoopbackFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetUart1LoopbackFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_Uart1LoopbackFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("Uart1Loopback", m_Uart1LoopbackFeature);
		if (result != VmbErrorSuccess)
		{
			m_Uart1LoopbackFeature.reset();
			return result;
		}
	}
	feature = m_Uart1LoopbackFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetUart1NumOfStopBits (Uart1NumOfStopBitsEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart1NumOfStopBitsFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (Uart1NumOfStopBitsEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetUart1NumOfStopBits (Uart1NumOfStopBitsEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart1NumOfStopBitsFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetUart1NumOfStopBitsFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_Uart1NumOfStopBitsFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("Uart1NumOfStopBits", m_Uart1NumOfStopBitsFeature);
		if (result != VmbErrorSuccess)
		{
			m_Uart1NumOfStopBitsFeature.reset();
			return result;
		}
	}
	feature = m_Uart1NumOfStopBitsFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetUart1Parity (Uart1ParityEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart1ParityFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (Uart1ParityEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetUart1Parity (Uart1ParityEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart1ParityFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetUart1ParityFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_Uart1ParityFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("Uart1Parity", m_Uart1ParityFeature);
		if (result != VmbErrorSuccess)
		{
			m_Uart1ParityFeature.reset();
			return result;
		}
	}
	feature = m_Uart1ParityFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetUart1ReadyToReceive (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart1ReadyToReceiveFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetUart1ReadyToReceive (bool value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetUart1ReadyToReceiveFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetUart1ReadyToReceiveFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_Uart1ReadyToReceiveFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("Uart1ReadyToReceive", m_Uart1ReadyToReceiveFeature);
		if (result != VmbErrorSuccess)
		{
			m_Uart1ReadyToReceiveFeature.reset();
			return result;
		}
	}
	feature = m_Uart1ReadyToReceiveFeature;
	return VmbErrorSuccess;
}


// Category /ImageFormatControl
VmbErrorType GoldeyeCamera::GetDecimationHorizontal (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDecimationHorizontalFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetDecimationHorizontal (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDecimationHorizontalFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetDecimationHorizontalFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_DecimationHorizontalFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("DecimationHorizontal", m_DecimationHorizontalFeature);
		if (result != VmbErrorSuccess)
		{
			m_DecimationHorizontalFeature.reset();
			return result;
		}
	}
	feature = m_DecimationHorizontalFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetDecimationVertical (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDecimationVerticalFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetDecimationVertical (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetDecimationVerticalFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetDecimationVerticalFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_DecimationVerticalFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("DecimationVertical", m_DecimationVerticalFeature);
		if (result != VmbErrorSuccess)
		{
			m_DecimationVerticalFeature.reset();
			return result;
		}
	}
	feature = m_DecimationVerticalFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetHeight (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetHeightFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetHeight (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetHeightFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetHeightFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_HeightFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("Height", m_HeightFeature);
		if (result != VmbErrorSuccess)
		{
			m_HeightFeature.reset();
			return result;
		}
	}
	feature = m_HeightFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetHeightMax (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetHeightMaxFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetHeightMaxFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_HeightMaxFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("HeightMax", m_HeightMaxFeature);
		if (result != VmbErrorSuccess)
		{
			m_HeightMaxFeature.reset();
			return result;
		}
	}
	feature = m_HeightMaxFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetOffsetX (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetOffsetXFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetOffsetX (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetOffsetXFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetOffsetXFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_OffsetXFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("OffsetX", m_OffsetXFeature);
		if (result != VmbErrorSuccess)
		{
			m_OffsetXFeature.reset();
			return result;
		}
	}
	feature = m_OffsetXFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetOffsetY (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetOffsetYFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetOffsetY (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetOffsetYFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetOffsetYFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_OffsetYFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("OffsetY", m_OffsetYFeature);
		if (result != VmbErrorSuccess)
		{
			m_OffsetYFeature.reset();
			return result;
		}
	}
	feature = m_OffsetYFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetPixelCoding (PixelCodingEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetPixelCodingFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (PixelCodingEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::GetPixelCodingFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_PixelCodingFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("PixelCoding", m_PixelCodingFeature);
		if (result != VmbErrorSuccess)
		{
			m_PixelCodingFeature.reset();
			return result;
		}
	}
	feature = m_PixelCodingFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetPixelColorFilter (PixelColorFilterEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetPixelColorFilterFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (PixelColorFilterEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::GetPixelColorFilterFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_PixelColorFilterFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("PixelColorFilter", m_PixelColorFilterFeature);
		if (result != VmbErrorSuccess)
		{
			m_PixelColorFilterFeature.reset();
			return result;
		}
	}
	feature = m_PixelColorFilterFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetPixelFormat (PixelFormatEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetPixelFormatFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (PixelFormatEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::GetPixelFormatFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_PixelFormatFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("PixelFormat", m_PixelFormatFeature);
		if (result != VmbErrorSuccess)
		{
			m_PixelFormatFeature.reset();
			return result;
		}
	}
	feature = m_PixelFormatFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetPixelSize (PixelSizeEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetPixelSizeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (PixelSizeEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::GetPixelSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_PixelSizeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("PixelSize", m_PixelSizeFeature);
		if (result != VmbErrorSuccess)
		{
			m_PixelSizeFeature.reset();
			return result;
		}
	}
	feature = m_PixelSizeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetSensorHeight (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSensorHeightFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetSensorHeightFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_SensorHeightFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("SensorHeight", m_SensorHeightFeature);
		if (result != VmbErrorSuccess)
		{
			m_SensorHeightFeature.reset();
			return result;
		}
	}
	feature = m_SensorHeightFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetSensorWidth (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetSensorWidthFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetSensorWidthFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_SensorWidthFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("SensorWidth", m_SensorWidthFeature);
		if (result != VmbErrorSuccess)
		{
			m_SensorWidthFeature.reset();
			return result;
		}
	}
	feature = m_SensorWidthFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetTestImageSelector (TestImageSelectorEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTestImageSelectorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (TestImageSelectorEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetTestImageSelector (TestImageSelectorEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetTestImageSelectorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue((VmbInt64_t)value);
	return result;
}
VmbErrorType GoldeyeCamera::GetTestImageSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_TestImageSelectorFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("TestImageSelector", m_TestImageSelectorFeature);
		if (result != VmbErrorSuccess)
		{
			m_TestImageSelectorFeature.reset();
			return result;
		}
	}
	feature = m_TestImageSelectorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetWidth (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetWidthFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetWidth (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetWidthFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetWidthFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_WidthFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("Width", m_WidthFeature);
		if (result != VmbErrorSuccess)
		{
			m_WidthFeature.reset();
			return result;
		}
	}
	feature = m_WidthFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetWidthMax (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetWidthMaxFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetWidthMaxFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_WidthMaxFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("WidthMax", m_WidthMaxFeature);
		if (result != VmbErrorSuccess)
		{
			m_WidthMaxFeature.reset();
			return result;
		}
	}
	feature = m_WidthMaxFeature;
	return VmbErrorSuccess;
}


// Category /Info
VmbErrorType GoldeyeCamera::GetGevDeviceMACAddress (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevDeviceMACAddressFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevDeviceMACAddressFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevDeviceMACAddressFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevDeviceMACAddress", m_GevDeviceMACAddressFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevDeviceMACAddressFeature.reset();
			return result;
		}
	}
	feature = m_GevDeviceMACAddressFeature;
	return VmbErrorSuccess;
}


// Category /Stream/Info
VmbErrorType GoldeyeCamera::GetGVSPFilterVersion (std::string & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPFilterVersionFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGVSPFilterVersionFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GVSPFilterVersionFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GVSPFilterVersion", m_GVSPFilterVersionFeature);
		if (result != VmbErrorSuccess)
		{
			m_GVSPFilterVersionFeature.reset();
			return result;
		}
	}
	feature = m_GVSPFilterVersionFeature;
	return VmbErrorSuccess;
}


// Category /Stream/Multicast
VmbErrorType GoldeyeCamera::GetMulticastEnable (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetMulticastEnableFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetMulticastEnable (bool value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetMulticastEnableFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetMulticastEnableFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_MulticastEnableFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("MulticastEnable", m_MulticastEnableFeature);
		if (result != VmbErrorSuccess)
		{
			m_MulticastEnableFeature.reset();
			return result;
		}
	}
	feature = m_MulticastEnableFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetMulticastIPAddress (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetMulticastIPAddressFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetMulticastIPAddress (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetMulticastIPAddressFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetMulticastIPAddressFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_MulticastIPAddressFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("MulticastIPAddress", m_MulticastIPAddressFeature);
		if (result != VmbErrorSuccess)
		{
			m_MulticastIPAddressFeature.reset();
			return result;
		}
	}
	feature = m_MulticastIPAddressFeature;
	return VmbErrorSuccess;
}


// Category /Stream/Settings
VmbErrorType GoldeyeCamera::GVSPAdjustPacketSize ()
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPAdjustPacketSizeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand ();
	return result;
}
VmbErrorType GoldeyeCamera::GetGVSPAdjustPacketSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GVSPAdjustPacketSizeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GVSPAdjustPacketSize", m_GVSPAdjustPacketSizeFeature);
		if (result != VmbErrorSuccess)
		{
			m_GVSPAdjustPacketSizeFeature.reset();
			return result;
		}
	}
	feature = m_GVSPAdjustPacketSizeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGVSPBurstSize (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPBurstSizeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGVSPBurstSize (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPBurstSizeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGVSPBurstSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GVSPBurstSizeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GVSPBurstSize", m_GVSPBurstSizeFeature);
		if (result != VmbErrorSuccess)
		{
			m_GVSPBurstSizeFeature.reset();
			return result;
		}
	}
	feature = m_GVSPBurstSizeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGVSPDriver (GVSPDriverEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPDriverFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (GVSPDriverEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetGVSPDriver (GVSPDriverEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPDriverFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGVSPDriverFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GVSPDriverFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GVSPDriver", m_GVSPDriverFeature);
		if (result != VmbErrorSuccess)
		{
			m_GVSPDriverFeature.reset();
			return result;
		}
	}
	feature = m_GVSPDriverFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGVSPHostReceiveBuffers (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPHostReceiveBuffersFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGVSPHostReceiveBuffers (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPHostReceiveBuffersFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGVSPHostReceiveBuffersFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GVSPHostReceiveBuffersFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GVSPHostReceiveBuffers", m_GVSPHostReceiveBuffersFeature);
		if (result != VmbErrorSuccess)
		{
			m_GVSPHostReceiveBuffersFeature.reset();
			return result;
		}
	}
	feature = m_GVSPHostReceiveBuffersFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGVSPMaxLookBack (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPMaxLookBackFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGVSPMaxLookBack (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPMaxLookBackFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGVSPMaxLookBackFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GVSPMaxLookBackFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GVSPMaxLookBack", m_GVSPMaxLookBackFeature);
		if (result != VmbErrorSuccess)
		{
			m_GVSPMaxLookBackFeature.reset();
			return result;
		}
	}
	feature = m_GVSPMaxLookBackFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGVSPMaxRequests (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPMaxRequestsFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGVSPMaxRequests (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPMaxRequestsFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGVSPMaxRequestsFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GVSPMaxRequestsFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GVSPMaxRequests", m_GVSPMaxRequestsFeature);
		if (result != VmbErrorSuccess)
		{
			m_GVSPMaxRequestsFeature.reset();
			return result;
		}
	}
	feature = m_GVSPMaxRequestsFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGVSPMaxWaitSize (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPMaxWaitSizeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGVSPMaxWaitSize (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPMaxWaitSizeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGVSPMaxWaitSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GVSPMaxWaitSizeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GVSPMaxWaitSize", m_GVSPMaxWaitSizeFeature);
		if (result != VmbErrorSuccess)
		{
			m_GVSPMaxWaitSizeFeature.reset();
			return result;
		}
	}
	feature = m_GVSPMaxWaitSizeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGVSPMissingSize (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPMissingSizeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGVSPMissingSize (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPMissingSizeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGVSPMissingSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GVSPMissingSizeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GVSPMissingSize", m_GVSPMissingSizeFeature);
		if (result != VmbErrorSuccess)
		{
			m_GVSPMissingSizeFeature.reset();
			return result;
		}
	}
	feature = m_GVSPMissingSizeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGVSPPacketSize (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPPacketSizeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGVSPPacketSize (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPPacketSizeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGVSPPacketSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GVSPPacketSizeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GVSPPacketSize", m_GVSPPacketSizeFeature);
		if (result != VmbErrorSuccess)
		{
			m_GVSPPacketSizeFeature.reset();
			return result;
		}
	}
	feature = m_GVSPPacketSizeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGVSPTiltingSize (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPTiltingSizeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGVSPTiltingSize (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPTiltingSizeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGVSPTiltingSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GVSPTiltingSizeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GVSPTiltingSize", m_GVSPTiltingSizeFeature);
		if (result != VmbErrorSuccess)
		{
			m_GVSPTiltingSizeFeature.reset();
			return result;
		}
	}
	feature = m_GVSPTiltingSizeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGVSPTimeout (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPTimeoutFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGVSPTimeout (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGVSPTimeoutFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGVSPTimeoutFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GVSPTimeoutFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GVSPTimeout", m_GVSPTimeoutFeature);
		if (result != VmbErrorSuccess)
		{
			m_GVSPTimeoutFeature.reset();
			return result;
		}
	}
	feature = m_GVSPTimeoutFeature;
	return VmbErrorSuccess;
}


// Category /Stream/Statistics
VmbErrorType GoldeyeCamera::GetStatFrameDelivered (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatFrameDeliveredFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetStatFrameDeliveredFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_StatFrameDeliveredFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("StatFrameDelivered", m_StatFrameDeliveredFeature);
		if (result != VmbErrorSuccess)
		{
			m_StatFrameDeliveredFeature.reset();
			return result;
		}
	}
	feature = m_StatFrameDeliveredFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetStatFrameDropped (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatFrameDroppedFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetStatFrameDroppedFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_StatFrameDroppedFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("StatFrameDropped", m_StatFrameDroppedFeature);
		if (result != VmbErrorSuccess)
		{
			m_StatFrameDroppedFeature.reset();
			return result;
		}
	}
	feature = m_StatFrameDroppedFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetStatFrameRate (double & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatFrameRateFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetStatFrameRateFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_StatFrameRateFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("StatFrameRate", m_StatFrameRateFeature);
		if (result != VmbErrorSuccess)
		{
			m_StatFrameRateFeature.reset();
			return result;
		}
	}
	feature = m_StatFrameRateFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetStatFrameRescued (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatFrameRescuedFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetStatFrameRescuedFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_StatFrameRescuedFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("StatFrameRescued", m_StatFrameRescuedFeature);
		if (result != VmbErrorSuccess)
		{
			m_StatFrameRescuedFeature.reset();
			return result;
		}
	}
	feature = m_StatFrameRescuedFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetStatFrameShoved (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatFrameShovedFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetStatFrameShovedFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_StatFrameShovedFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("StatFrameShoved", m_StatFrameShovedFeature);
		if (result != VmbErrorSuccess)
		{
			m_StatFrameShovedFeature.reset();
			return result;
		}
	}
	feature = m_StatFrameShovedFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetStatFrameUnderrun (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatFrameUnderrunFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetStatFrameUnderrunFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_StatFrameUnderrunFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("StatFrameUnderrun", m_StatFrameUnderrunFeature);
		if (result != VmbErrorSuccess)
		{
			m_StatFrameUnderrunFeature.reset();
			return result;
		}
	}
	feature = m_StatFrameUnderrunFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetStatLocalRate (double & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatLocalRateFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetStatLocalRateFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_StatLocalRateFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("StatLocalRate", m_StatLocalRateFeature);
		if (result != VmbErrorSuccess)
		{
			m_StatLocalRateFeature.reset();
			return result;
		}
	}
	feature = m_StatLocalRateFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetStatPacketErrors (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatPacketErrorsFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetStatPacketErrorsFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_StatPacketErrorsFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("StatPacketErrors", m_StatPacketErrorsFeature);
		if (result != VmbErrorSuccess)
		{
			m_StatPacketErrorsFeature.reset();
			return result;
		}
	}
	feature = m_StatPacketErrorsFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetStatPacketMissed (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatPacketMissedFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetStatPacketMissedFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_StatPacketMissedFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("StatPacketMissed", m_StatPacketMissedFeature);
		if (result != VmbErrorSuccess)
		{
			m_StatPacketMissedFeature.reset();
			return result;
		}
	}
	feature = m_StatPacketMissedFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetStatPacketReceived (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatPacketReceivedFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetStatPacketReceivedFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_StatPacketReceivedFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("StatPacketReceived", m_StatPacketReceivedFeature);
		if (result != VmbErrorSuccess)
		{
			m_StatPacketReceivedFeature.reset();
			return result;
		}
	}
	feature = m_StatPacketReceivedFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetStatPacketRequested (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatPacketRequestedFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetStatPacketRequestedFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_StatPacketRequestedFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("StatPacketRequested", m_StatPacketRequestedFeature);
		if (result != VmbErrorSuccess)
		{
			m_StatPacketRequestedFeature.reset();
			return result;
		}
	}
	feature = m_StatPacketRequestedFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetStatPacketResent (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatPacketResentFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetStatPacketResentFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_StatPacketResentFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("StatPacketResent", m_StatPacketResentFeature);
		if (result != VmbErrorSuccess)
		{
			m_StatPacketResentFeature.reset();
			return result;
		}
	}
	feature = m_StatPacketResentFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetStatTimeElapsed (double & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStatTimeElapsedFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetStatTimeElapsedFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_StatTimeElapsedFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("StatTimeElapsed", m_StatTimeElapsedFeature);
		if (result != VmbErrorSuccess)
		{
			m_StatTimeElapsedFeature.reset();
			return result;
		}
	}
	feature = m_StatTimeElapsedFeature;
	return VmbErrorSuccess;
}


// Category /StreamInformation
VmbErrorType GoldeyeCamera::GetStreamID (std::string & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStreamIDFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetStreamIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_StreamIDFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("StreamID", m_StreamIDFeature);
		if (result != VmbErrorSuccess)
		{
			m_StreamIDFeature.reset();
			return result;
		}
	}
	feature = m_StreamIDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetStreamType (StreamTypeEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetStreamTypeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (StreamTypeEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::GetStreamTypeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_StreamTypeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("StreamType", m_StreamTypeFeature);
		if (result != VmbErrorSuccess)
		{
			m_StreamTypeFeature.reset();
			return result;
		}
	}
	feature = m_StreamTypeFeature;
	return VmbErrorSuccess;
}


// Category /TransportLayerControl
VmbErrorType GoldeyeCamera::GetGevStreamChannelCount (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevStreamChannelCountFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevStreamChannelCountFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevStreamChannelCountFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevStreamChannelCount", m_GevStreamChannelCountFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevStreamChannelCountFeature.reset();
			return result;
		}
	}
	feature = m_GevStreamChannelCountFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevStreamChannelSelector (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevStreamChannelSelectorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevStreamChannelSelector (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevStreamChannelSelectorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevStreamChannelSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevStreamChannelSelectorFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevStreamChannelSelector", m_GevStreamChannelSelectorFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevStreamChannelSelectorFeature.reset();
			return result;
		}
	}
	feature = m_GevStreamChannelSelectorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSupportedIPConfigurationDHCP (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSupportedIPConfigurationDHCPFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSupportedIPConfigurationDHCPFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSupportedIPConfigurationDHCPFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSupportedIPConfigurationDHCP", m_GevSupportedIPConfigurationDHCPFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSupportedIPConfigurationDHCPFeature.reset();
			return result;
		}
	}
	feature = m_GevSupportedIPConfigurationDHCPFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSupportedIPConfigurationLLA (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSupportedIPConfigurationLLAFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSupportedIPConfigurationLLAFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSupportedIPConfigurationLLAFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSupportedIPConfigurationLLA", m_GevSupportedIPConfigurationLLAFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSupportedIPConfigurationLLAFeature.reset();
			return result;
		}
	}
	feature = m_GevSupportedIPConfigurationLLAFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSupportedIPConfigurationPersistentIP (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSupportedIPConfigurationPersistentIPFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSupportedIPConfigurationPersistentIPFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSupportedIPConfigurationPersistentIPFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSupportedIPConfigurationPersistentIP", m_GevSupportedIPConfigurationPersistentIPFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSupportedIPConfigurationPersistentIPFeature.reset();
			return result;
		}
	}
	feature = m_GevSupportedIPConfigurationPersistentIPFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSupportedOption (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSupportedOptionFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSupportedOptionFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSupportedOptionFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSupportedOption", m_GevSupportedOptionFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSupportedOptionFeature.reset();
			return result;
		}
	}
	feature = m_GevSupportedOptionFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSupportedOptionSelector (GevSupportedOptionSelectorEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSupportedOptionSelectorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (GevSupportedOptionSelectorEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetGevSupportedOptionSelector (GevSupportedOptionSelectorEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSupportedOptionSelectorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSupportedOptionSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSupportedOptionSelectorFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSupportedOptionSelector", m_GevSupportedOptionSelectorFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSupportedOptionSelectorFeature.reset();
			return result;
		}
	}
	feature = m_GevSupportedOptionSelectorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSupportedOptionalCommandsConcatenation (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSupportedOptionalCommandsConcatenationFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSupportedOptionalCommandsConcatenationFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSupportedOptionalCommandsConcatenationFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSupportedOptionalCommandsConcatenation", m_GevSupportedOptionalCommandsConcatenationFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSupportedOptionalCommandsConcatenationFeature.reset();
			return result;
		}
	}
	feature = m_GevSupportedOptionalCommandsConcatenationFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSupportedOptionalCommandsEVENT (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSupportedOptionalCommandsEVENTFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSupportedOptionalCommandsEVENTFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSupportedOptionalCommandsEVENTFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSupportedOptionalCommandsEVENT", m_GevSupportedOptionalCommandsEVENTFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSupportedOptionalCommandsEVENTFeature.reset();
			return result;
		}
	}
	feature = m_GevSupportedOptionalCommandsEVENTFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSupportedOptionalCommandsEVENTDATA (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSupportedOptionalCommandsEVENTDATAFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSupportedOptionalCommandsEVENTDATAFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSupportedOptionalCommandsEVENTDATAFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSupportedOptionalCommandsEVENTDATA", m_GevSupportedOptionalCommandsEVENTDATAFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSupportedOptionalCommandsEVENTDATAFeature.reset();
			return result;
		}
	}
	feature = m_GevSupportedOptionalCommandsEVENTDATAFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSupportedOptionalCommandsPACKETRESEND (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSupportedOptionalCommandsPACKETRESENDFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSupportedOptionalCommandsPACKETRESENDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSupportedOptionalCommandsPACKETRESENDFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSupportedOptionalCommandsPACKETRESEND", m_GevSupportedOptionalCommandsPACKETRESENDFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSupportedOptionalCommandsPACKETRESENDFeature.reset();
			return result;
		}
	}
	feature = m_GevSupportedOptionalCommandsPACKETRESENDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSupportedOptionalCommandsSerialNumber (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSupportedOptionalCommandsSerialNumberFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSupportedOptionalCommandsSerialNumberFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSupportedOptionalCommandsSerialNumberFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSupportedOptionalCommandsSerialNumber", m_GevSupportedOptionalCommandsSerialNumberFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSupportedOptionalCommandsSerialNumberFeature.reset();
			return result;
		}
	}
	feature = m_GevSupportedOptionalCommandsSerialNumberFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSupportedOptionalCommandsUserDefinedName (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSupportedOptionalCommandsUserDefinedNameFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSupportedOptionalCommandsUserDefinedNameFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSupportedOptionalCommandsUserDefinedNameFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSupportedOptionalCommandsUserDefinedName", m_GevSupportedOptionalCommandsUserDefinedNameFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSupportedOptionalCommandsUserDefinedNameFeature.reset();
			return result;
		}
	}
	feature = m_GevSupportedOptionalCommandsUserDefinedNameFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSupportedOptionalCommandsWRITEMEM (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSupportedOptionalCommandsWRITEMEMFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSupportedOptionalCommandsWRITEMEMFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSupportedOptionalCommandsWRITEMEMFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSupportedOptionalCommandsWRITEMEM", m_GevSupportedOptionalCommandsWRITEMEMFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSupportedOptionalCommandsWRITEMEMFeature.reset();
			return result;
		}
	}
	feature = m_GevSupportedOptionalCommandsWRITEMEMFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GevTimestampControlLatch ()
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampControlLatchFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand ();
	return result;
}
VmbErrorType GoldeyeCamera::GetGevTimestampControlLatchFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevTimestampControlLatchFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevTimestampControlLatch", m_GevTimestampControlLatchFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevTimestampControlLatchFeature.reset();
			return result;
		}
	}
	feature = m_GevTimestampControlLatchFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GevTimestampControlReset ()
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampControlResetFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand ();
	return result;
}
VmbErrorType GoldeyeCamera::GetGevTimestampControlResetFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevTimestampControlResetFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevTimestampControlReset", m_GevTimestampControlResetFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevTimestampControlResetFeature.reset();
			return result;
		}
	}
	feature = m_GevTimestampControlResetFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GevTimestampControlSet ()
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampControlSetFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->RunCommand ();
	return result;
}
VmbErrorType GoldeyeCamera::GetGevTimestampControlSetFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevTimestampControlSetFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevTimestampControlSet", m_GevTimestampControlSetFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevTimestampControlSetFeature.reset();
			return result;
		}
	}
	feature = m_GevTimestampControlSetFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevTimestampCounterSelector (GevTimestampCounterSelectorEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampCounterSelectorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (GevTimestampCounterSelectorEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetGevTimestampCounterSelector (GevTimestampCounterSelectorEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampCounterSelectorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevTimestampCounterSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevTimestampCounterSelectorFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevTimestampCounterSelector", m_GevTimestampCounterSelectorFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevTimestampCounterSelectorFeature.reset();
			return result;
		}
	}
	feature = m_GevTimestampCounterSelectorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevTimestampResetActivation (GevTimestampResetActivationEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampResetActivationFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (GevTimestampResetActivationEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetGevTimestampResetActivation (GevTimestampResetActivationEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampResetActivationFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevTimestampResetActivationFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevTimestampResetActivationFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevTimestampResetActivation", m_GevTimestampResetActivationFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevTimestampResetActivationFeature.reset();
			return result;
		}
	}
	feature = m_GevTimestampResetActivationFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevTimestampResetSource (GevTimestampResetSourceEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampResetSourceFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (GevTimestampResetSourceEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetGevTimestampResetSource (GevTimestampResetSourceEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampResetSourceFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevTimestampResetSourceFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevTimestampResetSourceFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevTimestampResetSource", m_GevTimestampResetSourceFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevTimestampResetSourceFeature.reset();
			return result;
		}
	}
	feature = m_GevTimestampResetSourceFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevTimestampSetActivation (GevTimestampSetActivationEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampSetActivationFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (GevTimestampSetActivationEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetGevTimestampSetActivation (GevTimestampSetActivationEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampSetActivationFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevTimestampSetActivationFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevTimestampSetActivationFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevTimestampSetActivation", m_GevTimestampSetActivationFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevTimestampSetActivationFeature.reset();
			return result;
		}
	}
	feature = m_GevTimestampSetActivationFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevTimestampSetSource (GevTimestampSetSourceEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampSetSourceFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (GevTimestampSetSourceEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetGevTimestampSetSource (GevTimestampSetSourceEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampSetSourceFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevTimestampSetSourceFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevTimestampSetSourceFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevTimestampSetSource", m_GevTimestampSetSourceFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevTimestampSetSourceFeature.reset();
			return result;
		}
	}
	feature = m_GevTimestampSetSourceFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevTimestampTickFrequency (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampTickFrequencyFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevTimestampTickFrequencyFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevTimestampTickFrequencyFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevTimestampTickFrequency", m_GevTimestampTickFrequencyFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevTimestampTickFrequencyFeature.reset();
			return result;
		}
	}
	feature = m_GevTimestampTickFrequencyFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevTimestampValue (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampValueFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevTimestampValueFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevTimestampValueFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevTimestampValue", m_GevTimestampValueFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevTimestampValueFeature.reset();
			return result;
		}
	}
	feature = m_GevTimestampValueFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevTimestampValueAtSet (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampValueAtSetFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevTimestampValueAtSet (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevTimestampValueAtSetFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevTimestampValueAtSetFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevTimestampValueAtSetFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevTimestampValueAtSet", m_GevTimestampValueAtSetFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevTimestampValueAtSetFeature.reset();
			return result;
		}
	}
	feature = m_GevTimestampValueAtSetFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevVersionMajor (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevVersionMajorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevVersionMajorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevVersionMajorFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevVersionMajor", m_GevVersionMajorFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevVersionMajorFeature.reset();
			return result;
		}
	}
	feature = m_GevVersionMajorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevVersionMinor (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevVersionMinorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevVersionMinorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevVersionMinorFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevVersionMinor", m_GevVersionMinorFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevVersionMinorFeature.reset();
			return result;
		}
	}
	feature = m_GevVersionMinorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetPayloadSize (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetPayloadSizeFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetPayloadSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_PayloadSizeFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("PayloadSize", m_PayloadSizeFeature);
		if (result != VmbErrorSuccess)
		{
			m_PayloadSizeFeature.reset();
			return result;
		}
	}
	feature = m_PayloadSizeFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevCCP (GevCCPEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevCCPFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (GevCCPEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::SetGevCCP (GevCCPEnum value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevCCPFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevCCPFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevCCPFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevCCP", m_GevCCPFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevCCPFeature.reset();
			return result;
		}
	}
	feature = m_GevCCPFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevCurrentIPConfigurationDHCP (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevCurrentIPConfigurationDHCPFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevCurrentIPConfigurationDHCP (bool value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevCurrentIPConfigurationDHCPFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevCurrentIPConfigurationDHCPFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevCurrentIPConfigurationDHCPFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevCurrentIPConfigurationDHCP", m_GevCurrentIPConfigurationDHCPFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevCurrentIPConfigurationDHCPFeature.reset();
			return result;
		}
	}
	feature = m_GevCurrentIPConfigurationDHCPFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevCurrentIPConfigurationLLA (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevCurrentIPConfigurationLLAFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevCurrentIPConfigurationLLA (bool value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevCurrentIPConfigurationLLAFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevCurrentIPConfigurationLLAFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevCurrentIPConfigurationLLAFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevCurrentIPConfigurationLLA", m_GevCurrentIPConfigurationLLAFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevCurrentIPConfigurationLLAFeature.reset();
			return result;
		}
	}
	feature = m_GevCurrentIPConfigurationLLAFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevCurrentIPConfigurationPersistentIP (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevCurrentIPConfigurationPersistentIPFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevCurrentIPConfigurationPersistentIP (bool value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevCurrentIPConfigurationPersistentIPFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevCurrentIPConfigurationPersistentIPFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevCurrentIPConfigurationPersistentIPFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevCurrentIPConfigurationPersistentIP", m_GevCurrentIPConfigurationPersistentIPFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevCurrentIPConfigurationPersistentIPFeature.reset();
			return result;
		}
	}
	feature = m_GevCurrentIPConfigurationPersistentIPFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevDeviceClass (GevDeviceClassEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevDeviceClassFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (GevDeviceClassEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::GetGevDeviceClassFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevDeviceClassFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevDeviceClass", m_GevDeviceClassFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevDeviceClassFeature.reset();
			return result;
		}
	}
	feature = m_GevDeviceClassFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevDeviceModeCharacterSet (GevDeviceModeCharacterSetEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevDeviceModeCharacterSetFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (GevDeviceModeCharacterSetEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::GetGevDeviceModeCharacterSetFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevDeviceModeCharacterSetFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevDeviceModeCharacterSet", m_GevDeviceModeCharacterSetFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevDeviceModeCharacterSetFeature.reset();
			return result;
		}
	}
	feature = m_GevDeviceModeCharacterSetFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevDeviceModeIsBigEndian (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevDeviceModeIsBigEndianFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevDeviceModeIsBigEndianFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevDeviceModeIsBigEndianFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevDeviceModeIsBigEndian", m_GevDeviceModeIsBigEndianFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevDeviceModeIsBigEndianFeature.reset();
			return result;
		}
	}
	feature = m_GevDeviceModeIsBigEndianFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevFirstURL (std::string & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevFirstURLFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevFirstURLFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevFirstURLFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevFirstURL", m_GevFirstURLFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevFirstURLFeature.reset();
			return result;
		}
	}
	feature = m_GevFirstURLFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevHeartbeatTimeout (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevHeartbeatTimeoutFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevHeartbeatTimeout (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevHeartbeatTimeoutFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevHeartbeatTimeoutFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevHeartbeatTimeoutFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevHeartbeatTimeout", m_GevHeartbeatTimeoutFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevHeartbeatTimeoutFeature.reset();
			return result;
		}
	}
	feature = m_GevHeartbeatTimeoutFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevIPConfigurationStatus (GevIPConfigurationStatusEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevIPConfigurationStatusFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (GevIPConfigurationStatusEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::GetGevIPConfigurationStatusFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevIPConfigurationStatusFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevIPConfigurationStatus", m_GevIPConfigurationStatusFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevIPConfigurationStatusFeature.reset();
			return result;
		}
	}
	feature = m_GevIPConfigurationStatusFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevInterfaceSelector (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevInterfaceSelectorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevInterfaceSelector (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevInterfaceSelectorFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevInterfaceSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevInterfaceSelectorFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevInterfaceSelector", m_GevInterfaceSelectorFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevInterfaceSelectorFeature.reset();
			return result;
		}
	}
	feature = m_GevInterfaceSelectorFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevMACAddress (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevMACAddressFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevMACAddressFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevMACAddressFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevMACAddress", m_GevMACAddressFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevMACAddressFeature.reset();
			return result;
		}
	}
	feature = m_GevMACAddressFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevMCDA (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevMCDAFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevMCDA (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevMCDAFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevMCDAFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevMCDAFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevMCDA", m_GevMCDAFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevMCDAFeature.reset();
			return result;
		}
	}
	feature = m_GevMCDAFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevMCPHostPort (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevMCPHostPortFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevMCPHostPort (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevMCPHostPortFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevMCPHostPortFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevMCPHostPortFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevMCPHostPort", m_GevMCPHostPortFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevMCPHostPortFeature.reset();
			return result;
		}
	}
	feature = m_GevMCPHostPortFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevMCRC (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevMCRCFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevMCRC (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevMCRCFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevMCRCFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevMCRCFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevMCRC", m_GevMCRCFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevMCRCFeature.reset();
			return result;
		}
	}
	feature = m_GevMCRCFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevMCSP (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevMCSPFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevMCSPFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevMCSPFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevMCSP", m_GevMCSPFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevMCSPFeature.reset();
			return result;
		}
	}
	feature = m_GevMCSPFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevMCTT (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevMCTTFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevMCTT (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevMCTTFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevMCTTFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevMCTTFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevMCTT", m_GevMCTTFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevMCTTFeature.reset();
			return result;
		}
	}
	feature = m_GevMCTTFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevMessageChannelCount (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevMessageChannelCountFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevMessageChannelCountFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevMessageChannelCountFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevMessageChannelCount", m_GevMessageChannelCountFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevMessageChannelCountFeature.reset();
			return result;
		}
	}
	feature = m_GevMessageChannelCountFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevNumberOfInterfaces (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevNumberOfInterfacesFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevNumberOfInterfacesFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevNumberOfInterfacesFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevNumberOfInterfaces", m_GevNumberOfInterfacesFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevNumberOfInterfacesFeature.reset();
			return result;
		}
	}
	feature = m_GevNumberOfInterfacesFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSCDA (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCDAFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevSCDA (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCDAFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSCDAFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSCDAFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSCDA", m_GevSCDAFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSCDAFeature.reset();
			return result;
		}
	}
	feature = m_GevSCDAFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSCPD (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCPDFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevSCPD (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCPDFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSCPDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSCPDFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSCPD", m_GevSCPDFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSCPDFeature.reset();
			return result;
		}
	}
	feature = m_GevSCPDFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSCPDirection (GevSCPDirectionEnum & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCPDirectionFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	VmbInt64_t nValue;
	result = pFeature->GetValue (nValue);
	value = (GevSCPDirectionEnum) nValue;
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSCPDirectionFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSCPDirectionFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSCPDirection", m_GevSCPDirectionFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSCPDirectionFeature.reset();
			return result;
		}
	}
	feature = m_GevSCPDirectionFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSCPHostPort (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCPHostPortFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevSCPHostPort (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCPHostPortFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSCPHostPortFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSCPHostPortFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSCPHostPort", m_GevSCPHostPortFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSCPHostPortFeature.reset();
			return result;
		}
	}
	feature = m_GevSCPHostPortFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSCPInterfaceIndex (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCPInterfaceIndexFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevSCPInterfaceIndex (VmbInt64_t value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCPInterfaceIndexFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSCPInterfaceIndexFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSCPInterfaceIndexFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSCPInterfaceIndex", m_GevSCPInterfaceIndexFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSCPInterfaceIndexFeature.reset();
			return result;
		}
	}
	feature = m_GevSCPInterfaceIndexFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSCPSBigEndian (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCPSBigEndianFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevSCPSBigEndian (bool value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCPSBigEndianFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSCPSBigEndianFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSCPSBigEndianFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSCPSBigEndian", m_GevSCPSBigEndianFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSCPSBigEndianFeature.reset();
			return result;
		}
	}
	feature = m_GevSCPSBigEndianFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSCPSDoNotFragment (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCPSDoNotFragmentFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevSCPSDoNotFragment (bool value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCPSDoNotFragmentFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSCPSDoNotFragmentFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSCPSDoNotFragmentFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSCPSDoNotFragment", m_GevSCPSDoNotFragmentFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSCPSDoNotFragmentFeature.reset();
			return result;
		}
	}
	feature = m_GevSCPSDoNotFragmentFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSCPSFireTestPacket (bool & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCPSFireTestPacketFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::SetGevSCPSFireTestPacket (bool value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCPSFireTestPacketFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->SetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSCPSFireTestPacketFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSCPSFireTestPacketFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSCPSFireTestPacket", m_GevSCPSFireTestPacketFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSCPSFireTestPacketFeature.reset();
			return result;
		}
	}
	feature = m_GevSCPSFireTestPacketFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSCSP (VmbInt64_t & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSCSPFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSCSPFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSCSPFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSCSP", m_GevSCSPFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSCSPFeature.reset();
			return result;
		}
	}
	feature = m_GevSCSPFeature;
	return VmbErrorSuccess;
}

VmbErrorType GoldeyeCamera::GetGevSecondURL (std::string & value)
{
	VmbErrorType result;
	AVT::VmbAPI::FeaturePtr pFeature;
	result = GetGevSecondURLFeature (pFeature);
	if (result != VmbErrorSuccess)
		return result;
	result = pFeature->GetValue (value);
	return result;
}
VmbErrorType GoldeyeCamera::GetGevSecondURLFeature (AVT::VmbAPI::FeaturePtr & feature)
{
	if (m_GevSecondURLFeature.get() == NULL)
	{
		VmbErrorType result;
		result = GetFeatureByName ("GevSecondURL", m_GevSecondURLFeature);
		if (result != VmbErrorSuccess)
		{
			m_GevSecondURLFeature.reset();
			return result;
		}
	}
	feature = m_GevSecondURLFeature;
	return VmbErrorSuccess;
}

